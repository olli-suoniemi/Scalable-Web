export function parseXMessage(raw) {
  const fieldValues = {};
  let f = undefined;
  let m = 0;
  for (const data of raw[1]){
    if (m % 2 === 0) {
      f = data;
    } else if (f) {
      fieldValues[f] = data;
    }
    m++;
  }
  return {
    xid: parseXId(raw[0]),
    fieldValues: fieldValues
  };
}
export function convertMap(raw) {
  const fieldValues = new Map();
  let f = undefined;
  let m = 0;
  for (const data of raw){
    if (m % 2 === 0 && typeof data === "string") {
      f = data;
    } else if (m % 2 === 1 && f) {
      fieldValues.set(f, data);
    }
    m++;
  }
  return fieldValues;
}
export function parseXReadReply(raw) {
  const out = [];
  for (const [key, idData] of raw ?? []){
    const messages = [];
    for (const rawMsg of idData){
      messages.push(parseXMessage(rawMsg));
    }
    out.push({
      key,
      messages
    });
  }
  return out;
}
export function parseXId(raw) {
  const [ms, sn] = raw.split("-");
  return {
    unixMs: parseInt(ms),
    seqNo: parseInt(sn)
  };
}
export function parseXPendingConsumers(raws) {
  const out = [];
  for (const raw of raws){
    if (isCondArray(raw) && isString(raw[0]) && isString(raw[1])) {
      out.push({
        name: raw[0],
        pending: parseInt(raw[1])
      });
    }
  }
  return out;
}
export function parseXPendingCounts(raw) {
  const infos = [];
  for (const r of raw){
    if (isCondArray(r) && isString(r[0]) && isString(r[1]) && isNumber(r[2]) && isNumber(r[3])) {
      infos.push({
        xid: parseXId(r[0]),
        owner: r[1],
        lastDeliveredMs: r[2],
        timesDelivered: r[3]
      });
    }
  }
  return infos;
}
export function parseXGroupDetail(rawGroups) {
  const out = [];
  for (const rawGroup of rawGroups){
    if (isCondArray(rawGroup)) {
      const data = convertMap(rawGroup);
      // array of arrays
      const consDeets = data.get("consumers");
      out.push({
        name: rawstr(data.get("name") ?? null),
        lastDeliveredId: parseXId(rawstr(data.get("last-delivered-id") ?? null)),
        pelCount: rawnum(data.get("pel-count") ?? null),
        pending: parseXPendingCounts(data.get("pending")),
        consumers: parseXConsumerDetail(consDeets)
      });
    }
  }
  return out;
}
export function parseXConsumerDetail(nestedRaws) {
  const out = [];
  for (const raws of nestedRaws){
    const data = convertMap(raws);
    const pending = data.get("pending").map((p)=>{
      return {
        xid: parseXId(rawstr(p[0])),
        lastDeliveredMs: rawnum(p[1]),
        timesDelivered: rawnum(p[2])
      };
    });
    const r = {
      name: rawstr(data.get("name") ?? null),
      seenTime: rawnum(data.get("seen-time") ?? null),
      pelCount: rawnum(data.get("pel-count") ?? null),
      pending
    };
    out.push(r);
  }
  return out;
}
export function xidstr(xid) {
  if (typeof xid === "string") return xid;
  if (typeof xid === "number") return `${xid}-0`;
  if (xid instanceof Array && xid.length > 1) return `${xid[0]}-${xid[1]}`;
  if (isXId(xid)) return `${xid.unixMs}-${xid.seqNo}`;
  throw "fail";
}
export function rawnum(raw) {
  return raw ? +raw.toString() : 0;
}
export function rawstr(raw) {
  return raw ? raw.toString() : "";
}
// deno-lint-ignore no-explicit-any
export function isString(x) {
  return typeof x === "string";
}
// deno-lint-ignore no-explicit-any
export function isNumber(x) {
  return typeof x === "number";
}
export function isCondArray(x) {
  const l = x.length;
  if (l > 0 || l < 1) return true;
  else return false;
}
function isXId(xid) {
  return xid.unixMs !== undefined;
}
//# sourceMappingURL=data:application/json;base64,